<!DOCTYPE html>
<html>
<head>
	<title>Bacon's List Login</title>
</head>
<body>
	<div>
		<div class="login-text">
			<img alt="baconMan" class="baconMan img-rounded baconMan-login-img" src="/assets/images/baconMan.png">
			<h2 id="welcome">Welcome to Bacon's List!</h2>
			<h4 id="h41">This is a site for the bacon enthusiast to buy and sell great bacon-themed products.</h4>
			<h4 id="h42">See what we have to offer by clicking the login button below.</h4>
		</div>
		<div class="fb-login-button" id="fb-login-button" data-auto-logout-link="false" data-button-type="continue_with" data-max-rows="1" data-show-faces="false" data-size="large" data-use-continue-as="false"></div>
		<div id="fb-root"></div>
	</div>
<script>

// Clear localStorage
      localStorage.clear();

  // This is called with the results from from FB.getLoginStatus().
  function statusChangeCallback(response) {
    console.log('statusChangeCallback');
    console.log(response);
    console.log(response.authResponse.userID);
    var ID = response.authResponse.userID;

          localStorage.setItem("userID", ID);


    // The response object is returned with a status field that lets the
    // app know the current login status of the person.
    // Full docs on the response object can be found in the documentation
    // for FB.getLoginStatus().
    if (response.status === 'connected') {
      // Logged into your app and Facebook.
      
      testAPI();
      //window.location.reload(false); 
        window.location = "/bacon";
    } else {
      // The person is not logged into your app or we are unable to tell.
    }
  }

  // This function is called when someone finishes with the Login
  // Button.  See the onlogin handler attached to it in the sample
  // code below.
  function checkLoginState() {
    FB.getLoginStatus(function(response) {
      statusChangeCallback(response);
      console.log(response);
    });
  }

  window.fbAsyncInit = function() {
    FB.init({
      appId      : '122804275120497',
      cookie     : true,  // enable cookies to allow the server to access 
                          // the session
      xfbml      : true,  // parse social plugins on this page
      version    : 'v2.8' // use graph api version 2.8
    });

    // Now that we've initialized the JavaScript SDK, we call 
    // FB.getLoginStatus().  This function gets the state of the
    // person visiting this page and can return one of three states to
    // the callback you provide.  They can be:
    //
    // 1. Logged into your app ('connected')
    // 2. Logged into Facebook, but not your app ('not_authorized')
    // 3. Not logged into Facebook and can't tell if they are logged into
    //    your app or not.
    //
    // These three cases are handled in the callback function.

    FB.getLoginStatus(function(response) {
      statusChangeCallback(response);
    });
  };


  // Load the SDK asynchronously
  (function(d, s, id) {
    var js, fjs = d.getElementsByTagName(s)[0];
    if (d.getElementById(id)) return;
    js = d.createElement(s); js.id = id;
    js.src = "//connect.facebook.net/en_US/sdk.js";
    fjs.parentNode.insertBefore(js, fjs);
  }(document, 'script', 'facebook-jssdk'));

  // Here we run a very simple test of the Graph API after login is
  // successful.  See statusChangeCallback() for when this call is made.
  function testAPI() {
    console.log('Welcome!  Fetching your information.... ');
    FB.api('/me', function(response) {
      console.log('Successful login for: ' + response.name);
      var USERNAME = response.name;
      var response = response[0];
      console.log(USERNAME);

      // Store all content into localStorage
      localStorage.setItem("name", USERNAME);
      
        	//window.location.reload(false); 
	      window.location = "/bacon";

        //$("#sign-in-btn").html(localStorage.getItem("name"));
    });
  }
  </script>
